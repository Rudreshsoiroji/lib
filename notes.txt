1) use npm init to create a node project
2) install this
 npm install -D typescript nodemon ts-node @type/node

 3) npx tsc -- init tsc is typescript coompiler

 4)craete .gitignore

 // nodemod restarts the server as soon as something changes

 add eslient to Find and fix problems in your JavaScript code (use in all codeS)

 3) create a .prettierrc.json file for consistensy 

 4) install express and its @types/express which should be a dv dependency

 // set up express in src/app.ts
 //use routes in app
.use is used for middlewares .get is default methoud used to get date to client, .listen is used to listen on port boyh takes a value and a callback

Object.freeze is use to make a property readonly

5) install dotenv and @types/dotenv as dev dependency

import config from .env in config.ts and run it in that file after that use config.port to access port

6) use mongoose and its @types

7) use mongose . connect to connect and mongoose .connection.on to dis play successfully connection message use connected and error

use process.exit(1) in catch on databse 

import in server and call/run

past mongoose.connected.on on top followed by await mongoose.connect

8) use error handler client --> router --> middlewear --> request handle --> global error handler it ahs 4 parameters err, req, res, next

use npm i http-errors to craete http errors


in eroor use .status and in json send message and stack stack should be optional show only if in dev mode

throw new error and createhttperror is used to create error


craete routes using express.router

to reqister a user 
a)// validate the user
b) process
c) return

add express.json() to activate json parsor use in app.use()


make database calls and see if the user alreas\dy exists
a)make schema/ models

use findone() to check uniqueness of email it returns either an document or null use if ()

hash the password
use bcrypt

use tokens jwt token has {sub:}payload is usually _id secret key and expires in
201 is the ststus code for resource created

match user for login and compare password

generate jwt tokem and res it

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
crud


craete routerfile
writes controller
craete models and types
